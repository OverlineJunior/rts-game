--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.14.15 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Types = {}
local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
function Types.ReadEVENT_spawnOnClient(): ({ serverId: number, serializedComponents: any })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value = {} :: any
	Value.serverId = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		RecieveInstanceCursor += 1
		Value.serializedComponents = RecieveInstances[RecieveInstanceCursor]
	end
	return Value
end

function Types.WriteEVENT_spawnOnClient(Value: { serverId: number, serializedComponents: any }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Value.serverId)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.serializedComponents ~= nil and 1 or 0)
	if Value.serializedComponents ~= nil then
		table.insert(SendInstances, Value.serializedComponents)
	end
end

function Types.ReadEVENT_despawnOnClient(): ({ serverId: number })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Value = {} :: any
	Value.serverId = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	return Value
end

function Types.WriteEVENT_despawnOnClient(Value: { serverId: number }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Value.serverId)
end

function Types.ReadEVENT_sendUnitPosition(): ({ serverId: number, x: number, y: number, z: number, orientation: number })
	-- Read BLOCK: 10 bytes
	local BLOCK_START = Read(10)
	local Value = {} :: any
	Value.serverId = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.x = -math.huge
		else
			Value.x = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.x = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.x = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.x = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 4)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.y = -math.huge
		else
			Value.y = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.y = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.y = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.y = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 6)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.z = -math.huge
		else
			Value.z = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.z = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.z = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.z = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 8)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.orientation = -math.huge
		else
			Value.orientation = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.orientation = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.orientation = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.orientation = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value
end

function Types.WriteEVENT_sendUnitPosition(Value: { serverId: number, x: number, y: number, z: number, orientation: number }): ()
	-- Allocate BLOCK: 11 bytes
	local BLOCK_START = Allocate(11)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Value.serverId)
	if Value.x > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b0_11111_0000000000)
	elseif Value.x < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000000)
	elseif Value.x ~= Value.x then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000001)
	elseif Value.x == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0)
	else
		local float = Value.x
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 3, Result)
	end
	if Value.y > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b0_11111_0000000000)
	elseif Value.y < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000000)
	elseif Value.y ~= Value.y then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000001)
	elseif Value.y == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0)
	else
		local float = Value.y
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 5, Result)
	end
	if Value.z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b0_11111_0000000000)
	elseif Value.z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000000)
	elseif Value.z ~= Value.z then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000001)
	elseif Value.z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0)
	else
		local float = Value.z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 7, Result)
	end
	if Value.orientation > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b0_11111_0000000000)
	elseif Value.orientation < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000000)
	elseif Value.orientation ~= Value.orientation then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000001)
	elseif Value.orientation == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0)
	else
		local float = Value.orientation
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 9, Result)
	end
end

function Types.ReadEVENT_requestMovement(): ({ serverIds: {number}, x: number, z: number, increment: boolean })
	-- Read BLOCK: 7 bytes
	local BLOCK_START = Read(7)
	local Value = {} :: any
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value.serverIds = table.create(Length)
		-- Read BLOCK: 2 bytes
	local ARRAY_START_1 = Read(2 * Length)
	for Index = 1, Length do
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		local Item_1 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value.serverIds, Item_1)
	end
	-- END ARRAY
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.x = -math.huge
		else
			Value.x = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.x = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.x = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.x = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 4)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.z = -math.huge
		else
			Value.z = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.z = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.z = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.z = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Value.increment = (buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1)
	return Value
end

function Types.WriteEVENT_requestMovement(Value: { serverIds: {number}, x: number, z: number, increment: boolean }): ()
	-- Allocate BLOCK: 8 bytes
	local BLOCK_START = Allocate(8)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value.serverIds)
		-- Allocate BLOCK: 2 bytes
	local ARRAY_START_1 = Allocate(2 * #Value.serverIds)
	for Index = 1, #Value.serverIds do
		local Item_1 = Value.serverIds[Index]
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	if Value.x > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b0_11111_0000000000)
	elseif Value.x < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000000)
	elseif Value.x ~= Value.x then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000001)
	elseif Value.x == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0)
	else
		local float = Value.x
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 3, Result)
	end
	if Value.z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b0_11111_0000000000)
	elseif Value.z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000000)
	elseif Value.z ~= Value.z then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000001)
	elseif Value.z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0)
	else
		local float = Value.z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 5, Result)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 7, Value.increment and 1 or 0)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	spawnOnClient = {
		on = NOOP
	},
	despawnOnClient = {
		on = NOOP
	},
	sendUnitPosition = {
		on = NOOP
	},
	requestMovement = {
		fire = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { serverId: number, serializedComponents: any } = Types.ReadEVENT_spawnOnClient()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"spawnOnClient\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: { serverId: number } = Types.ReadEVENT_despawnOnClient()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"despawnOnClient\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: { serverId: number, x: number, y: number, z: number, orientation: number } = Types.ReadEVENT_sendUnitPosition()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"sendUnitPosition\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	spawnOnClient = {
		on = function(Listener: (Value: { serverId: number, serializedComponents: any }) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				Events.Reliable[0] = nil
			end
		end
	},
	despawnOnClient = {
		on = function(Listener: (Value: { serverId: number }) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				Events.Reliable[1] = nil
			end
		end
	},
	sendUnitPosition = {
		on = function(Listener: (Value: { serverId: number, x: number, y: number, z: number, orientation: number }) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				Events.Reliable[2] = nil
			end
		end
	},
	requestMovement = {
		fire = function(Value: { serverIds: {number}, x: number, z: number, increment: boolean }): ()
			Types.WriteEVENT_requestMovement(Value)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL